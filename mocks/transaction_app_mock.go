// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/transaction/transaction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	transaction "github.com/danilotadeu/pismo/model/transaction"
	gomock "github.com/golang/mock/gomock"
)

// TransactionApp is a mock of App interface.
type TransactionApp struct {
	ctrl     *gomock.Controller
	recorder *TransactionAppMockRecorder
}

// TransactionAppMockRecorder is the mock recorder for TransactionApp.
type TransactionAppMockRecorder struct {
	mock *TransactionApp
}

// NewTransactionApp creates a new mock instance.
func NewTransactionApp(ctrl *gomock.Controller) *TransactionApp {
	mock := &TransactionApp{ctrl: ctrl}
	mock.recorder = &TransactionAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransactionApp) EXPECT() *TransactionAppMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *TransactionApp) CreateTransaction(ctx context.Context, transactionBody transaction.TransactionRequest) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transactionBody)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *TransactionAppMockRecorder) CreateTransaction(ctx, transactionBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*TransactionApp)(nil).CreateTransaction), ctx, transactionBody)
}
